// <auto-generated />
using System;
using JumpTheQueue.WebAPI.Implementation.Domain.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JumpTheQueue.WebAPI.Implementation.Migrations
{
    [DbContext(typeof(JumpTheQueueContext))]
    [Migration("20210901074157_01092021-JumpTheQueue-Init")]
    partial class _01092021JumpTheQueueInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("JumpTheQueue.WebAPI.Implementation.Domain.Entities.AccessCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("createdTime")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("endTime")
                        .HasColumnType("date");

                    b.Property<Guid>("QueueId")
                        .HasColumnName("queue_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("startTime")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("character varying");

                    b.Property<Guid>("VisitorId")
                        .HasColumnName("visitor_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("VisitorId");

                    b.ToTable("AccessCode");
                });

            modelBuilder.Entity("JumpTheQueue.WebAPI.Implementation.Domain.Entities.Queue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("AccessLink")
                        .HasColumnName("accessLink")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnName("closeTime")
                        .HasColumnType("date");

                    b.Property<bool?>("Closed")
                        .HasColumnName("closed")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying");

                    b.Property<int>("MinAttentionTime")
                        .HasColumnName("minAttentionTime")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("OpenTime")
                        .HasColumnName("openTime")
                        .HasColumnType("date");

                    b.Property<bool?>("Started")
                        .HasColumnName("started")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("JumpTheQueue.WebAPI.Implementation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("role")
                        .HasColumnType("character varying");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("JumpTheQueue.WebAPI.Implementation.Domain.Entities.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Visitor");
                });

            modelBuilder.Entity("JumpTheQueue.WebAPI.Implementation.Domain.Entities.AccessCode", b =>
                {
                    b.HasOne("JumpTheQueue.WebAPI.Implementation.Domain.Entities.Queue", "Queue")
                        .WithMany("AccessCode")
                        .HasForeignKey("QueueId")
                        .HasConstraintName("accesscode_fk")
                        .IsRequired();

                    b.HasOne("JumpTheQueue.WebAPI.Implementation.Domain.Entities.Visitor", "Visitor")
                        .WithMany("AccessCode")
                        .HasForeignKey("VisitorId")
                        .HasConstraintName("accesscode_fk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("JumpTheQueue.WebAPI.Implementation.Domain.Entities.Queue", b =>
                {
                    b.HasOne("JumpTheQueue.WebAPI.Implementation.Domain.Entities.User", "User")
                        .WithMany("Queue")
                        .HasForeignKey("UserId")
                        .HasConstraintName("queue_fk")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
